## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Gestion des photos'
description: |-

  APIs pour la gestion des photos
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/photos
    metadata:
      groupName: 'Gestion des photos'
      groupDescription: |-

        APIs pour la gestion des photos
      subgroup: ''
      subgroupDescription: ''
      title: 'Lister toutes les photos'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Z1Edafv8kg36DV4e5caP6bh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/photos
    metadata:
      groupName: 'Gestion des photos'
      groupDescription: |-

        APIs pour la gestion des photos
      subgroup: ''
      subgroupDescription: ''
      title: 'Ajouter plusieurs photos'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      assignment_id:
        name: assignment_id
        description: 'The <code>id</code> of an existing record in the assignments table.'
        required: true
        example: optio
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      photo_type_id:
        name: photo_type_id
        description: 'The <code>id</code> of an existing record in the photo_types table.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      photos:
        name: photos
        description: 'Le champ value doit être une image.'
        required: true
        example:
          - null
        type: 'file[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      assignment_id: optio
    fileParameters:
      photos:
        - null
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer geVa6h6bdE35ZcvfPD4ka18'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/photos/{id}'
    metadata:
      groupName: 'Gestion des photos'
      groupDescription: |-

        APIs pour la gestion des photos
      subgroup: ''
      subgroupDescription: ''
      title: 'Afficher une photo'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the photo.'
        required: true
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 10
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5vd36Ph41DEbk6fZcaeaV8g'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/photos/{id}'
    metadata:
      groupName: 'Gestion des photos'
      groupDescription: |-

        APIs pour la gestion des photos
      subgroup: ''
      subgroupDescription: ''
      title: 'Mettre à jour une photo'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the photo.'
        required: true
        example: 7
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 7
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      photo_type_id:
        name: photo_type_id
        description: 'The <code>id</code> of an existing record in the photo_types table.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      photo:
        name: photo
        description: 'Le champ value doit être une image.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters: []
    fileParameters:
      photo: null
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Z6EdcPhkfD6ea5vba143g8V'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/photos/{photo}/cover'
    metadata:
      groupName: 'Gestion des photos'
      groupDescription: |-

        APIs pour la gestion des photos
      subgroup: ''
      subgroupDescription: ''
      title: 'Rendre une photo comme photo de couverture'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      photo:
        name: photo
        description: 'The photo.'
        required: true
        example: 6
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      photo: 6
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer v3c6e68P514fagEkabZdVDh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/photos/{id}'
    metadata:
      groupName: 'Gestion des photos'
      groupDescription: |-

        APIs pour la gestion des photos
      subgroup: ''
      subgroupDescription: ''
      title: 'Supprimer une photo'
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the photo.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer dPEfZaD4V6ka3c856ehvbg1'
    controller: null
    method: null
    route: null
    custom: []
